{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8081';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    sessionStorage.setItem(\"token\", this.createBasicAuthToken(username, password)); //this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    sessionStorage.setItem(\"token\", null);\n  }\n\n  setUpRoles(username) {\n    var roles = [];\n    var config = {\n      headers: {\n        'Access-Control-Allow-Origin': true,\n        'Access-Control-Allow-Methods': \"OPTIONS,GET,PUT,POST,DELETE\",\n        'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type\",\n        'Authorization': this.getToken()\n      }\n    };\n    axios.get(`${API_URL}/users/getRole/${username}`, config).then(response => {\n      roles = response.data.roles;\n      sessionStorage.setItem(\"roles\", roles);\n    });\n  }\n\n  getRoles() {\n    let roles = sessionStorage.getItem(\"roles\");\n    if (roles === null) return '';\n    return roles;\n  }\n\n  isAdmin() {\n    if (this.getRoles().includes(\"ADMIN\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUserName() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return '';\n    return user;\n  }\n\n  getToken() {\n    let token = sessionStorage.getItem(\"token\");\n    if (token === null) return '';\n    return token;\n  }\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        console.log('intercepted!');\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/Users/Gabi/Documents/Basics-Miu/Basics/frontend/src/service/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","logout","removeItem","setUpRoles","roles","config","getToken","then","response","data","getRoles","getItem","isAdmin","includes","isUserLoggedIn","user","getLoggedInUserName","token","setupAxiosInterceptors","interceptors","request","use","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AAEA,OAAO,MAAMC,gCAAgC,GAAG,mBAAzC;;AAEP,MAAMC,qBAAN,CAA4B;AAExBC,EAAAA,iCAAiC,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAClD,WAAON,KAAK,CAACO,GAAN,CAAW,GAAEN,OAAQ,YAArB,EACH;AAAEO,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAE,KAAKC,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC;AAAjB;AAAX,KADG,CAAP;AAEH;;AAEDI,EAAAA,oBAAoB,CAACL,QAAD,EAAWC,QAAX,EAAqB;AACrC,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDO,EAAAA,uBAAuB,CAACR,QAAD,EAAWC,QAAX,EAAqB;AACxC;AACA;AACAQ,IAAAA,cAAc,CAACC,OAAf,CAAuBb,gCAAvB,EAAyDG,QAAzD;AACAS,IAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgC,KAAKL,oBAAL,CAA0BL,QAA1B,EAAoCC,QAApC,CAAhC,EAJwC,CAKxC;AACH;;AAEDU,EAAAA,MAAM,GAAG;AACLF,IAAAA,cAAc,CAACG,UAAf,CAA0Bf,gCAA1B;AACAY,IAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgC,IAAhC;AACH;;AAEDG,EAAAA,UAAU,CAACb,QAAD,EAAW;AAEb,QAAIc,KAAK,GAAG,EAAZ;AACA,QAAIC,MAAM,GAAG;AACLZ,MAAAA,OAAO,EAAE;AAAC,uCAA+B,IAAhC;AACE,wCAAgC,6BADlC;AAEE,wCAAgC,gCAFlC;AAGE,yBAAiB,KAAKa,QAAL;AAHnB;AADJ,KAAb;AAMArB,IAAAA,KAAK,CACJO,GADD,CACM,GAAEN,OAAQ,kBAAiBI,QAAS,EAD1C,EAC6Ce,MAD7C,EAECE,IAFD,CAEMC,QAAQ,IAAI;AAACJ,MAAAA,KAAK,GAAGI,QAAQ,CAACC,IAAT,CAAcL,KAAtB;AAClBL,MAAAA,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAgCI,KAAhC;AAAwC,KAHzC;AAKH;;AACLM,EAAAA,QAAQ,GAAG;AACD,QAAIN,KAAK,GAAGL,cAAc,CAACY,OAAf,CAAuB,OAAvB,CAAZ;AACQ,QAAIP,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,KAAP;AACT;;AAETQ,EAAAA,OAAO,GAAG;AACN,QAAG,KAAKF,QAAL,GAAgBG,QAAhB,CAAyB,OAAzB,CAAH,EAAsC;AAClC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,IAAI,GAAGhB,cAAc,CAACY,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAI4B,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,WAAO,IAAP;AACH;;AAEDC,EAAAA,mBAAmB,GAAG;AAClB,QAAID,IAAI,GAAGhB,cAAc,CAACY,OAAf,CAAuBxB,gCAAvB,CAAX;AACA,QAAI4B,IAAI,KAAK,IAAb,EAAmB,OAAO,EAAP;AACnB,WAAOA,IAAP;AACH;;AAEDT,EAAAA,QAAQ,GAAG;AACH,QAAIW,KAAK,GAAGlB,cAAc,CAACY,OAAf,CAAuB,OAAvB,CAAZ;AACA,QAAIM,KAAK,KAAK,IAAd,EAAoB,OAAO,EAAP;AACpB,WAAOA,KAAP;AACH;;AAELC,EAAAA,sBAAsB,CAACD,KAAD,EAAQ;AAC1BhC,IAAAA,KAAK,CAACkC,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKhB,MAAD,IAAY;AACR,UAAI,KAAKS,cAAL,EAAJ,EAA2B;AACvBQ,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAlB,QAAAA,MAAM,CAACZ,OAAP,CAAeC,aAAf,GAA+BuB,KAA/B;AACH;;AACD,aAAOZ,MAAP;AACH,KAPL;AASH;;AAhFuB;;AAmF5B,eAAe,IAAIjB,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\n\nconst API_URL = 'http://localhost:8081'\n\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeBasicAuthenticationService(username, password) {\n        return axios.get(`${API_URL}/basicauth`,\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\n    }\n\n    createBasicAuthToken(username, password) {\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin(username, password) {\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n        //console.log('registerSuccessfulLogin')\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        sessionStorage.setItem(\"token\", this.createBasicAuthToken(username, password))\n        //this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n        sessionStorage.setItem(\"token\", null)\n    }\n\n    setUpRoles(username) {\n\n            var roles = []\n            var config = {\n                    headers: {'Access-Control-Allow-Origin': true,\n                               'Access-Control-Allow-Methods': \"OPTIONS,GET,PUT,POST,DELETE\",\n                               'Access-Control-Allow-Headers': \"X-Requested-With, Content-Type\",\n                               'Authorization': this.getToken()}\n                };\n            axios\n            .get(`${API_URL}/users/getRole/${username}`, config)\n            .then(response => {roles = response.data.roles;\n             sessionStorage.setItem(\"roles\", roles);});\n\n        }\n    getRoles() {\n              let roles = sessionStorage.getItem(\"roles\")\n                      if (roles === null) return ''\n                      return roles\n            }\n\n    isAdmin() {\n        if(this.getRoles().includes(\"ADMIN\")) {\n            return true;\n        }\n        return false;\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return false\n        return true\n    }\n\n    getLoggedInUserName() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if (user === null) return ''\n        return user\n    }\n\n    getToken() {\n            let token = sessionStorage.getItem(\"token\")\n            if (token === null) return ''\n            return token\n        }\n\n    setupAxiosInterceptors(token) {\n        axios.interceptors.request.use(\n            (config) => {\n                if (this.isUserLoggedIn()) {\n                    console.log('intercepted!');\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}